// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mediavitrina

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson424e89DecodeGithubComZikwallAppMetricaPkgDomainMediavitrina(in *jlexer.Lexer, out *MediaVitrina) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_name":
			out.EventName = string(in.String())
		case "player_id":
			out.PlayerID = string(in.String())
		case "vitrina_id":
			out.VitrinaID = string(in.String())
		case "player":
			out.Player = string(in.String())
		case "sid":
			out.SID = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "drm":
			out.DRM = uint8(in.Uint8())
		case "drm_system_name":
			out.DRMSystemName = string(in.String())
		case "bitrate":
			out.Bitrate = uint32(in.Uint32())
		case "event_ts":
			out.EventTS = string(in.String())
		case "client_time_zone_offset":
			out.ClientTimeZoneOffset = uint8(in.Uint8())
		case "device_type":
			out.DeviceType = string(in.String())
		case "device_vendor":
			out.DeviceVendor = string(in.String())
		case "device_model":
			out.DeviceModel = string(in.String())
		case "user_browser":
			out.UserBrowser = string(in.String())
		case "user_browser_ver":
			out.UserBrowserVer = string(in.String())
		case "user_browser_ver_major":
			out.UserBrowserVerMajor = string(in.String())
		case "user_browser_ver_minor":
			out.UserBrowserVerMinor = string(in.String())
		case "user_os_name":
			out.UserOSName = string(in.String())
		case "user_os_ver_major":
			out.UserOSVerMajor = string(in.String())
		case "user_os_ver_minor":
			out.UserOSVerMinor = string(in.String())
		case "stream_ts":
			out.StreamTS = int32(in.Int32())
		case "application_id":
			out.ApplicationID = string(in.String())
		case "user_region_iso_3166_2":
			out.UserRegionISO3166_2 = string(in.String())
		case "content_sec":
			out.ContentSec = int32(in.Int32())
		case "pause_sec":
			out.PauseSec = int32(in.Int32())
		case "error_title":
			out.ErrorTitle = string(in.String())
		case "error_adv":
			out.ErrorAdv = string(in.String())
		case "buffering_sec":
			out.BufferingSec = int32(in.Int32())
		case "buffering_count":
			out.BufferingCount = int32(in.Int32())
		case "client_ad_sec":
			out.ClientAdSec = int32(in.Int32())
		case "ad_position":
			out.AdPosition = string(in.String())
		case "init_before_stream_or_ad_request_msec":
			out.InitBeforeStreamOrAdRequestMsec = int32(in.Int32())
		case "stream_or_ad_initial_buffering_msec":
			out.StreamOrAdInitialBufferingMsec = int32(in.Int32())
		case "is_subtitles_mode":
			out.IsSubtitlesMode = uint8(in.Uint8())
		case "is_fullscreen_mode":
			out.IsFullscreenMode = uint8(in.Uint8())
		case "is_muted":
			out.IsMuted = uint8(in.Uint8())
		case "product":
			out.Product = string(in.String())
		case "is_web_player":
			out.IsWebPlayer = uint8(in.Uint8())
		case "is_nobanner":
			out.IsNobanner = uint8(in.Uint8())
		case "event_datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EventDatetime).UnmarshalJSON(data))
			}
		case "event_timestamp":
			out.EventTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson424e89EncodeGithubComZikwallAppMetricaPkgDomainMediavitrina(out *jwriter.Writer, in MediaVitrina) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventName))
	}
	{
		const prefix string = ",\"player_id\":"
		out.RawString(prefix)
		out.String(string(in.PlayerID))
	}
	{
		const prefix string = ",\"vitrina_id\":"
		out.RawString(prefix)
		out.String(string(in.VitrinaID))
	}
	{
		const prefix string = ",\"player\":"
		out.RawString(prefix)
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"sid\":"
		out.RawString(prefix)
		out.String(string(in.SID))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"drm\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DRM))
	}
	{
		const prefix string = ",\"drm_system_name\":"
		out.RawString(prefix)
		out.String(string(in.DRMSystemName))
	}
	{
		const prefix string = ",\"bitrate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Bitrate))
	}
	{
		const prefix string = ",\"event_ts\":"
		out.RawString(prefix)
		out.String(string(in.EventTS))
	}
	{
		const prefix string = ",\"client_time_zone_offset\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ClientTimeZoneOffset))
	}
	{
		const prefix string = ",\"device_type\":"
		out.RawString(prefix)
		out.String(string(in.DeviceType))
	}
	{
		const prefix string = ",\"device_vendor\":"
		out.RawString(prefix)
		out.String(string(in.DeviceVendor))
	}
	{
		const prefix string = ",\"device_model\":"
		out.RawString(prefix)
		out.String(string(in.DeviceModel))
	}
	{
		const prefix string = ",\"user_browser\":"
		out.RawString(prefix)
		out.String(string(in.UserBrowser))
	}
	{
		const prefix string = ",\"user_browser_ver\":"
		out.RawString(prefix)
		out.String(string(in.UserBrowserVer))
	}
	{
		const prefix string = ",\"user_browser_ver_major\":"
		out.RawString(prefix)
		out.String(string(in.UserBrowserVerMajor))
	}
	{
		const prefix string = ",\"user_browser_ver_minor\":"
		out.RawString(prefix)
		out.String(string(in.UserBrowserVerMinor))
	}
	{
		const prefix string = ",\"user_os_name\":"
		out.RawString(prefix)
		out.String(string(in.UserOSName))
	}
	{
		const prefix string = ",\"user_os_ver_major\":"
		out.RawString(prefix)
		out.String(string(in.UserOSVerMajor))
	}
	{
		const prefix string = ",\"user_os_ver_minor\":"
		out.RawString(prefix)
		out.String(string(in.UserOSVerMinor))
	}
	{
		const prefix string = ",\"stream_ts\":"
		out.RawString(prefix)
		out.Int32(int32(in.StreamTS))
	}
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.String(string(in.ApplicationID))
	}
	{
		const prefix string = ",\"user_region_iso_3166_2\":"
		out.RawString(prefix)
		out.String(string(in.UserRegionISO3166_2))
	}
	{
		const prefix string = ",\"content_sec\":"
		out.RawString(prefix)
		out.Int32(int32(in.ContentSec))
	}
	{
		const prefix string = ",\"pause_sec\":"
		out.RawString(prefix)
		out.Int32(int32(in.PauseSec))
	}
	{
		const prefix string = ",\"error_title\":"
		out.RawString(prefix)
		out.String(string(in.ErrorTitle))
	}
	{
		const prefix string = ",\"error_adv\":"
		out.RawString(prefix)
		out.String(string(in.ErrorAdv))
	}
	{
		const prefix string = ",\"buffering_sec\":"
		out.RawString(prefix)
		out.Int32(int32(in.BufferingSec))
	}
	{
		const prefix string = ",\"buffering_count\":"
		out.RawString(prefix)
		out.Int32(int32(in.BufferingCount))
	}
	{
		const prefix string = ",\"client_ad_sec\":"
		out.RawString(prefix)
		out.Int32(int32(in.ClientAdSec))
	}
	{
		const prefix string = ",\"ad_position\":"
		out.RawString(prefix)
		out.String(string(in.AdPosition))
	}
	{
		const prefix string = ",\"init_before_stream_or_ad_request_msec\":"
		out.RawString(prefix)
		out.Int32(int32(in.InitBeforeStreamOrAdRequestMsec))
	}
	{
		const prefix string = ",\"stream_or_ad_initial_buffering_msec\":"
		out.RawString(prefix)
		out.Int32(int32(in.StreamOrAdInitialBufferingMsec))
	}
	{
		const prefix string = ",\"is_subtitles_mode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.IsSubtitlesMode))
	}
	{
		const prefix string = ",\"is_fullscreen_mode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.IsFullscreenMode))
	}
	{
		const prefix string = ",\"is_muted\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.IsMuted))
	}
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix)
		out.String(string(in.Product))
	}
	{
		const prefix string = ",\"is_web_player\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.IsWebPlayer))
	}
	{
		const prefix string = ",\"is_nobanner\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.IsNobanner))
	}
	{
		const prefix string = ",\"event_datetime\":"
		out.RawString(prefix)
		out.Raw((in.EventDatetime).MarshalJSON())
	}
	{
		const prefix string = ",\"event_timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MediaVitrina) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson424e89EncodeGithubComZikwallAppMetricaPkgDomainMediavitrina(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediaVitrina) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson424e89EncodeGithubComZikwallAppMetricaPkgDomainMediavitrina(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MediaVitrina) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson424e89DecodeGithubComZikwallAppMetricaPkgDomainMediavitrina(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediaVitrina) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson424e89DecodeGithubComZikwallAppMetricaPkgDomainMediavitrina(l, v)
}
